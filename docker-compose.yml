services:
    # Redis Service
    redis:
        image: redis:7-alpine
        container_name: vrecom_redis
        ports:
            - "${REDIS_PORT:-6379}:6379"
        volumes:
            - redis_data:/data
        networks:
            - vrecom_network
        restart: unless-stopped
        command: redis-server --appendonly yes

    # API Server (Go)
    api_server:
        build:
            context: ./backend/api_server
            dockerfile: Dockerfile
        container_name: vrecom_api_server
        ports:
            - "${API_SERVER_PORT:-2030}:${API_SERVER_PORT:-2030}"
        environment:
            - STATUS_DEV=${STATUS_DEV:-dev}
            - HOST_ADDRESS=${API_SERVER_HOST:-0.0.0.0}
            - HOST_PORT=${API_SERVER_PORT:-2030}
            - HOST_READ_TIMEOUT=${API_SERVER_READ_TIMEOUT:-60}
            - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
            - SESSION_SECRET=${SESSION_SECRET:-your-super-secret-session-key-change-in-production}
            - REDIS_HOST=${REDIS_HOST:-redis}
            - REDIS_PORT=${REDIS_PORT:-6379}
            - REDIS_PASSWORD=${REDIS_PASSWORD:-}
            - REDIS_DB=${REDIS_DB:-0}
            - AI_SERVER_URL=${AI_SERVER_URL:-http://ai_server:9999}
        volumes:
            - ./backend/api_server/logs:/app/logs
            - ./backend/api_server/config:/app/config
            - ./data/user_logs:/app/user_logs
        networks:
            - vrecom_network
        depends_on:
            - redis
        restart: unless-stopped

    # AI Server (Python)
    ai_server:
        build:
            context: ./backend/ai_server
            dockerfile: Dockerfile
        container_name: vrecom_ai_server
        ports:
            - "${AI_SERVER_PORT:-9999}:${AI_SERVER_PORT:-9999}"
        environment:
            - HOST=${AI_SERVER_HOST:-0.0.0.0}
            - PORT=${AI_SERVER_PORT:-9999}
            - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
            - SESSION_SECRET=${SESSION_SECRET:-your-super-secret-session-key-change-in-production}
            - MYSQL_HOST=${MYSQL_HOST:-mysql}
            - MYSQL_PORT=${MYSQL_PORT:-3306}
            - MYSQL_USER=${MYSQL_USER:-admin}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD:-pokiwar0981}
            - MYSQL_DATABASE=${MYSQL_DATABASE:-shop}
            - MONGODB_HOST=${MONGODB_HOST:-mongodb}
            - MONGODB_PORT=${MONGODB_PORT:-27017}
            - MONGODB_USERNAME=${MONGODB_USERNAME:-root}
            - MONGODB_PASSWORD=${MONGODB_PASSWORD:-password}
        volumes:
            - ./backend/ai_server/src:/app/src
            - ./backend/ai_server/config:/app/config
            - ./backend/ai_server/tasks:/app/tasks
            - ./backend/ai_server/logs:/app/logs
            - ./backend/ai_server/models:/app/models
        networks:
            - vrecom_network
        restart: unless-stopped

    # Prometheus (Monitoring for AI Server)
    prometheus:
        image: prom/prometheus:latest
        container_name: vrecom_prometheus
        ports:
            - "${PROMETHEUS_PORT:-9090}:9090"
        volumes:
            - ./backend/ai_server/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
        networks:
            - vrecom_network
        restart: unless-stopped

    # Frontend (React + Vite)
    frontend:
        build:
            context: ./frontend/project
            dockerfile: Dockerfile
        container_name: vrecom_frontend
        ports:
            - "${FRONTEND_PORT:-5173}:${FRONTEND_PORT:-5173}"
        environment:
            - VITE_API_SERVER_URL=${VITE_API_SERVER_URL:-http://localhost:2030}
            - VITE_AI_SERVER_URL=${VITE_AI_SERVER_URL:-http://localhost:9999}
        volumes:
            - ./frontend/project/src:/app/src
            - ./frontend/project/public:/app/public
        networks:
            - vrecom_network
        depends_on:
            - api_server
            - ai_server
        restart: unless-stopped

networks:
    vrecom_network:
        driver: bridge

volumes:
    redis_data:
    prometheus_data:
