const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const bcrypt = require('bcryptjs');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file database
const dbPath = path.join(__dirname, '..', 'database', 'demo.db');

// T·∫°o k·∫øt n·ªëi database
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('L·ªói khi t·∫°o database:', err.message);
        return;
    }
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn SQLite database');
});

// Kh·ªüi t·∫°o c√°c b·∫£ng
const initializeTables = () => {
    return new Promise((resolve, reject) => {
        // B·∫£ng users
        const createUsersTable = `
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                email TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                full_name TEXT,
                avatar_url TEXT DEFAULT '/images/default-avatar.png',
                preferences TEXT DEFAULT '{}',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )
        `;

        // B·∫£ng categories
        const createCategoriesTable = `
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                icon TEXT DEFAULT 'üì¶',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `;

        // B·∫£ng products
        const createProductsTable = `
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price DECIMAL(10,2) DEFAULT 0.00,
                category_id INTEGER,
                image_url TEXT DEFAULT '/images/default-product.png',
                rating DECIMAL(2,1) DEFAULT 0.0,
                review_count INTEGER DEFAULT 0,
                stock_quantity INTEGER DEFAULT 0,
                is_featured INTEGER DEFAULT 0,
                tags TEXT DEFAULT '[]',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        `;

        // B·∫£ng user_interactions (likes, views, purchases)
        const createInteractionsTable = `
            CREATE TABLE IF NOT EXISTS user_interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                product_id INTEGER NOT NULL,
                interaction_type TEXT NOT NULL CHECK(interaction_type IN ('like', 'view', 'purchase', 'cart', 'wishlist')),
                rating INTEGER CHECK(rating >= 1 AND rating <= 5),
                interaction_data TEXT DEFAULT '{}',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
                FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE
            )
        `;

        // B·∫£ng user_sessions
        const createSessionsTable = `
            CREATE TABLE IF NOT EXISTS user_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                session_token TEXT UNIQUE NOT NULL,
                expires_at DATETIME NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
            )
        `;

        // T·∫°o c√°c b·∫£ng tu·∫ßn t·ª±
        db.serialize(() => {
            db.run(createUsersTable, (err) => {
                if (err) reject(err);
                else console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng users');
            });

            db.run(createCategoriesTable, (err) => {
                if (err) reject(err);
                else console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng categories');
            });

            db.run(createProductsTable, (err) => {
                if (err) reject(err);
                else console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng products');
            });

            db.run(createInteractionsTable, (err) => {
                if (err) reject(err);
                else console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng user_interactions');
            });

            db.run(createSessionsTable, (err) => {
                if (err) reject(err);
                else {
                    console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng user_sessions');
                    resolve();
                }
            });
        });
    });
};

// Th√™m d·ªØ li·ªáu m·∫´u
const seedSampleData = async () => {
    return new Promise(async (resolve, reject) => {
        try {
            // Hash password cho user m·∫´u
            const hashedPassword = await bcrypt.hash('123456', 10);

            // D·ªØ li·ªáu categories
            const categories = [
                { name: 'ƒêi·ªán t·ª≠', description: 'Thi·∫øt b·ªã ƒëi·ªán t·ª≠ v√† c√¥ng ngh·ªá', icon: 'üì±' },
                { name: 'Th·ªùi trang', description: 'Qu·∫ßn √°o v√† ph·ª• ki·ªán', icon: 'üëï' },
                { name: 'Gia ƒë√¨nh & Nh√† c·ª≠a', description: 'ƒê·ªì d√πng gia ƒë√¨nh', icon: 'üè†' },
                { name: 'Th·ªÉ thao', description: 'D·ª•ng c·ª• v√† trang ph·ª•c th·ªÉ thao', icon: '‚öΩ' },
                { name: 'S√°ch & VƒÉn ph√≤ng ph·∫©m', description: 'S√°ch v√† ƒë·ªì d√πng vƒÉn ph√≤ng', icon: 'üìö' },
                { name: 'L√†m ƒë·∫πp & S·ª©c kh·ªèe', description: 'M·ªπ ph·∫©m v√† s·∫£n ph·∫©m chƒÉm s√≥c s·ª©c kh·ªèe', icon: 'üíÑ' }
            ];

            // Users m·∫´u
            const users = [
                { username: 'demo_user', email: 'demo@example.com', password_hash: hashedPassword, full_name: 'Demo User' },
                { username: 'john_doe', email: 'john@example.com', password_hash: hashedPassword, full_name: 'John Doe' },
                { username: 'jane_smith', email: 'jane@example.com', password_hash: hashedPassword, full_name: 'Jane Smith' },
                { username: 'alice_wong', email: 'alice@example.com', password_hash: hashedPassword, full_name: 'Alice Wong' }
            ];

            // Products m·∫´u
            const products = [
                { name: 'iPhone 15 Pro', description: 'ƒêi·ªán tho·∫°i th√¥ng minh cao c·∫•p t·ª´ Apple', price: 999.99, category_id: 1, rating: 4.8, review_count: 1250, stock_quantity: 50, is_featured: 1 },
                { name: 'Samsung Galaxy S24', description: 'ƒêi·ªán tho·∫°i Android flagship', price: 899.99, category_id: 1, rating: 4.6, review_count: 890, stock_quantity: 30, is_featured: 1 },
                { name: 'MacBook Pro M3', description: 'Laptop chuy√™n nghi·ªáp cho s√°ng t·∫°o', price: 1999.99, category_id: 1, rating: 4.9, review_count: 456, stock_quantity: 20, is_featured: 1 },
                { name: '√Åo polo nam', description: '√Åo polo cotton cao c·∫•p', price: 29.99, category_id: 2, rating: 4.3, review_count: 234, stock_quantity: 100 },
                { name: 'Qu·∫ßn jeans n·ªØ', description: 'Qu·∫ßn jeans skinny fit th·ªùi trang', price: 49.99, category_id: 2, rating: 4.5, review_count: 567, stock_quantity: 75 },
                { name: 'B√†n l√†m vi·ªác g·ªó', description: 'B√†n l√†m vi·ªác hi·ªán ƒë·∫°i', price: 199.99, category_id: 3, rating: 4.4, review_count: 123, stock_quantity: 25 },
                { name: 'Gh·∫ø gaming', description: 'Gh·∫ø ch∆°i game ergonomic', price: 299.99, category_id: 3, rating: 4.7, review_count: 345, stock_quantity: 15, is_featured: 1 },
                { name: 'Gi√†y ch·∫°y b·ªô Nike', description: 'Gi√†y th·ªÉ thao chuy√™n d·ª•ng', price: 129.99, category_id: 4, rating: 4.6, review_count: 789, stock_quantity: 40 },
                { name: 'B√≥ng ƒë√° FIFA', description: 'B√≥ng ƒë√° ch√≠nh th·ª©c', price: 39.99, category_id: 4, rating: 4.2, review_count: 156, stock_quantity: 60 },
                { name: 'S√°ch h·ªçc JavaScript', description: 'H∆∞·ªõng d·∫´n l·∫≠p tr√¨nh JS t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao', price: 24.99, category_id: 5, rating: 4.8, review_count: 234, stock_quantity: 80 },
                { name: 'Kem d∆∞·ª°ng da', description: 'Kem d∆∞·ª°ng ·∫©m ch·ªëng l√£o h√≥a', price: 45.99, category_id: 6, rating: 4.5, review_count: 678, stock_quantity: 90 },
                { name: 'Serum vitamin C', description: 'Serum l√†m s√°ng da', price: 35.99, category_id: 6, rating: 4.7, review_count: 445, stock_quantity: 55 }
            ];

            console.log('üå± B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu...');

            // Insert categories
            const insertCategory = db.prepare('INSERT INTO categories (name, description, icon) VALUES (?, ?, ?)');
            for (let cat of categories) {
                insertCategory.run(cat.name, cat.description, cat.icon);
            }
            insertCategory.finalize();
            console.log('‚úÖ ƒê√£ th√™m categories');

            // Insert users
            const insertUser = db.prepare('INSERT INTO users (username, email, password_hash, full_name) VALUES (?, ?, ?, ?)');
            for (let user of users) {
                insertUser.run(user.username, user.email, user.password_hash, user.full_name);
            }
            insertUser.finalize();
            console.log('‚úÖ ƒê√£ th√™m users');

            // Insert products
            const insertProduct = db.prepare(`
                INSERT INTO products (name, description, price, category_id, rating, review_count, stock_quantity, is_featured)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `);
            for (let product of products) {
                insertProduct.run(
                    product.name,
                    product.description,
                    product.price,
                    product.category_id,
                    product.rating,
                    product.review_count,
                    product.stock_quantity,
                    product.is_featured || 0
                );
            }
            insertProduct.finalize();
            console.log('‚úÖ ƒê√£ th√™m products');

            // Th√™m m·ªôt s·ªë interactions m·∫´u
            const interactions = [
                { user_id: 1, product_id: 1, interaction_type: 'like', rating: 5 },
                { user_id: 1, product_id: 3, interaction_type: 'like', rating: 5 },
                { user_id: 1, product_id: 7, interaction_type: 'view' },
                { user_id: 2, product_id: 1, interaction_type: 'view' },
                { user_id: 2, product_id: 2, interaction_type: 'like', rating: 4 },
                { user_id: 3, product_id: 4, interaction_type: 'like', rating: 4 },
                { user_id: 3, product_id: 5, interaction_type: 'purchase', rating: 5 },
                { user_id: 4, product_id: 8, interaction_type: 'like', rating: 5 },
                { user_id: 4, product_id: 10, interaction_type: 'view' }
            ];

            const insertInteraction = db.prepare(`
                INSERT INTO user_interactions (user_id, product_id, interaction_type, rating)
                VALUES (?, ?, ?, ?)
            `);
            for (let interaction of interactions) {
                insertInteraction.run(
                    interaction.user_id,
                    interaction.product_id,
                    interaction.interaction_type,
                    interaction.rating || null
                );
            }
            insertInteraction.finalize();
            console.log('‚úÖ ƒê√£ th√™m user interactions');

            resolve();
        } catch (error) {
            reject(error);
        }
    });
};

// H√†m ch√≠nh
const main = async () => {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o database...\n');

        await initializeTables();
        console.log('\nüìã Ho√†n th√†nh t·∫°o b·∫£ng!');

        await seedSampleData();
        console.log('\nüéâ Ho√†n th√†nh kh·ªüi t·∫°o database v√† d·ªØ li·ªáu m·∫´u!');

        console.log('\nüìä Th√¥ng tin ƒëƒÉng nh·∫≠p demo:');
        console.log('- Username: demo_user');
        console.log('- Email: demo@example.com');
        console.log('- Password: 123456');

        console.log('\nüí° Ch·∫°y l·ªánh sau ƒë·ªÉ kh·ªüi ƒë·ªông server:');
        console.log('npm run dev');

    } catch (error) {
        console.error('‚ùå L·ªói khi kh·ªüi t·∫°o database:', error.message);
    } finally {
        db.close((err) => {
            if (err) {
                console.error('L·ªói khi ƒë√≥ng database:', err.message);
            } else {
                console.log('\nüîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
            }
        });
    }
};

// Ch·∫°y script
main();
